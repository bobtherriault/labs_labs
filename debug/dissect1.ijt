LABTITLE=: 'Dissect I'
LABFOCUS=: 1

NB. =========================================================
Lab Chapter Intro
NB. =========================================================
Lab Section What is it?
Dissect is an aid to analyzing J sentences.

It graphically displays the execution of a J sentence to make it easier to see what's going on. It is
particularly valuable in finding the cause of an error.
)
require 'debug/dissect'

NB. =========================================================
Lab Chapter 1st Example
NB. =========================================================
Lab Section Display
Let's take a look at what dissect displays.

You may have to move the Dissect display window, if it is hidden behind this one.
)
PREPARE
dissectoncect =: 1
dissecthandle =: 0$a:
dissectonce =: 3 : 0
4!:55 <'dissect_base_'
dissecthandle =: dissecthandle , 2 dissect y
if. 0 < dissectoncect =: <: dissectoncect do.
  dissect =: dissectonce
end.
0 0 $0
)
dissectclose =: 3 : 0
for_l. dissecthandle do.
  try.
    destroy__l ''
  catch.
  end.
end.
dissecthandle =: 0$a:
)
dissect =: dissectonce
PREPARE
dissect '100 200 + i.2 3'

NB. =========================================================
Lab Section How a noun is displayed
The J text of the sentence under consideration is shown at the top.

Execution flows from the top of the diagram to the bottom.

The '2 3' list is the first block. The top line is its shape, and under that is its value. That the value is '2 3', not '23', is indicated by the background shading. Other noun displays also use this space-saving trick.
)

NB. =========================================================
Lab Section How a verb is displayed
The first block is input to the i. verb.

The top line of the verb block is the verb name and the rank of the cells it was applied on. Under that is the shape of the result of the execution of the verb. At the bottom of the block is the result of the verb.

Observe that i. has a monadic rank of 1 and the result of its operation on the noun 2 3 has shape 2 3 and its value is the two-row table 0 1 2 ,: 3 4 5 .
)

NB. =========================================================
Lab Section Verb display continued
The '100 200' noun and the result of the i. verb are input to the + verb. The left and right ranks of the dyadic + are shown beside the + symbol, and below that are the shape and value of the result of its execution. That result, since it is the last result, is the final result of the sentence.

The rank shown is the 'effective rank' of the verb - the rank of the cells the verb was applied on.  The effective rank is the smaller of the argument rank and the intrinsic rank of the verb.

The rank of the i. verb (1) is in regular font but the ranks of the + verb (0 0) are in large bold italics. That indicates that the rank of the i. verb is 'inactive' in that it does not subdivide its input into argument cells, and that both ranks of the + verb are 'active', because they both subdivide their inputs into argument cells.
)

NB. =========================================================
Lab Section The inputs for a particular result-cell
Select a cell of the final result by clicking on it. The block expands to display which cell you selected under the result shape. If you selected '204', '1 1' appears.

In the input blocks we see the input cells that went into that final result-cell outlined in green.  If you selected '204', these will be the cells containing '200' and '4'.

In the sentence display at the top of the window, we see the + verb in green, because the result of that verb has been selected.
)

NB. =========================================================
Lab Section Tooltips and Status Line
Hover the cursor over elements of the diagram to see associated tooltips. You can change the level of detail in the tooltips using the menu option Tooltips|Detail. You can change how quickly the tooltips appear using the menu option Tooltips|Delay.

The Status Line, which is above the main display, to the right of the > button, gives an immediate summary of the information under the cursor.

NB. =========================================================
Lab Section Tooltips and Status Line ct'd
As you explore the elements of the display shown, notice the status line, and then the tooltip that is displayed:

1. Hover over the result-atom 10 at the end of the final result.  The tooltip shows the verb and its shape, and the path to the value 10.  The path tells the sequence of selections and box-openings needed to find a given atom in a noun.  Here, to find the value 10 you select box number 2, open it, and then select atom number 5 of the contents.

2. Hover over the verb < .  Hovering over the verb gives a detailed description of which results are displayed in the block.

3. Hover over the " .  The " line is inserted at the point in the computation where it affects the rank of argument cells.  The tooltip shows what overall verb that represents.

4. Hover over the +: .  The tooltip doesn't tell you much until a single argument-cell has been selected.

5. Now go and click on the result-atom 10 at the end of the final result.  This selects a single argument-cell.  Observe that the tooltip for the < and +: verbs now give more information.

)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '<@:+:@:i."0 (4 5 6)'

NB. =========================================================
Lab Chapter Hidden intermediate results
NB. =========================================================
Lab Section Which results are not initially displayed?
Certain intermediate results are not at first displayed because they might not be compatible as items of a single array. They can be displayed individually as inputs to a later result.

The result-cells of the verb v in u@v, u&v or u&.v can have different shapes or even different types, and could consequently be impossible to display in an array.

In the example here, the intermediate results of the open (>) verb are different shapes and will be displayed one at a time when you select cells of the final result. Select a result-cell of the # verb and the intermediate result of > that contributes to it is displayed.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '#@> ;: ''there is a tide'''

NB. =========================================================
Lab Section See the hidden results
Select one of the final result-cells. The corresponding result-cell of the > verb is then displayed. It is the one used in producing the final result-cell you selected. Observe that the result you clicked on is the # of items in the visible result-cell of > .
)

NB. =========================================================
Lab Section What is a frame?
In the display of a verb result, Dissect shows the shape in two parts, the frame and the shape of a result-cell.

For monads, it goes like this:

The rank r of the cells that will be operated on is the smaller of the rank of the verb and the rank of the argument.  For the important case of a verb infinite rank, according to this rule r will always be the rank of the argument, which is another way of saying that the verb applies to the operand in its entirety.

In general, you can think of the argument as an array of r-cells. The shape of the argument can then be written (f,r). f is the frame.

Think of the argument as an array, with shape f, made up of cells of rank r.

If the argument consists of a single r-cell, the frame f is empty.

The verb is applied to each r-cell, replacing each cell with the result of the verb. The result is an array of shape f whose items have the shape of the result of applying the verb to an r-cell.

For dyads there are extra steps, but the shape of the result is still the frame concatenated to the shape of a result-cell.
)

NB. =========================================================
Lab Section Results that can be displayed in full
When the sentence indicates that all the result-cells of a verb are to be assembled into a single array, that array is shown in the result section of the block for the verb.

The sentence here shows four examples.

;: operates on a single cell so its result can automatically be displayed.

> operates as a monad in the right-to-left execution of the sentence and must finish, on all of its cells, before verbs to its left are executed.

#"1 is executed as part of the compound +/@:(#"1) in which the @: indicates that the results of #"1 (one number per row) are to be collected into a single array before proceeding to the next verb.

+/ is the end of a compound and all its results must be assembled into a single array, much as with > .
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '+/@:(#"1) > ;:''Joe Sam Ted'''

NB. =========================================================
Lab Section Results that must be hidden
If there is no frame for the intermediate result, the cells could be incompatible, as here.

Click on the 2 in the final result and dissect displays the corresponding intermediate result, 'ab'. The other intermediate result is a 3-atom numeric list. The two intermediate results cells have different shapes and types; they can not be joined together in the same array.

Note that the left and right ranks of ; are shown as 1 1 instead of _ _. Dissect displays the effective ranks of verbs instead of the actual ranks.  The effective rank is the rank of the actual argument cells the verb operates on. In this case ; is operating on lists, so its effective ranks are 1 1.

If you want to know the intrinsic rank of a verb rather than the effective rank, hover the cursor over the verb to see a Tooltip that tells you.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '#@> ''ab'';1 2 3'

NB. =========================================================
Lab Chapter Diagnosing errors
NB. =========================================================
Lab Section Displaying Errors
When your sentence has an error, dissect automatically homes in on the error and leaves the display as if you had selected the path of the error at every possible point.

Here, the failure occurred when the sentence tried to execute

>: 'a'

because incrementing the character is not allowed.

The cell where the error was encountered is indicated with double-crosshatching, and cells that were unexecuted after the error are shown with reverse crosshatching.

The selection lines beneath the shape lines show you the path to the error, and the arguments in error are highlighted with colored boxing.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
>:@>  1;'a';3  NB. Uninformative session error meessage
dissect '>:@>  1;''a'';3'

NB. =========================================================
Lab Section Framing Errors
Sometimes a verb executes correctly on all its cells, but the results of those cells are incompatible and cannot be assembled into a single array.  The J session reports this as a 'domain error'.  Dissect calls it by the name 'framing error' and denotes it with special dashed boxing around the incompatible cells. 
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
> 1;'a';2 3
dissect '> 1;''a'';2 3'

NB. =========================================================
Lab Section Agreement Errors
The sentence shown below, adding some numbers to the average of some other numbers, raises a length error. Dissect can help us to see what's wrong.

The error is flagged on the + verb with the bright red word 'agreement'.  Dissect uses this in place of the less specific 'length error' to indicate execution of a dyad on arguments with incompatible frames.

Hover the cursor over the red 'agreement' block. The tooltip refers you to the ranks of the arguments of the + verb.
The arguments do not 'agree', in that the left frame is 3 and the right frame is 4; i. e. + is trying to add a list of 3 numbers to a list of 4 numbers.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
NB. Add 6 5 3 to average of 3 9 6 */ 1 5 9 2
6 5 3 ([ + (+/ % #)@]) 3 9 6 */ 1 5 9 2
dissect '6 5 3 ([ + (+/ % #)@]) 3 9 6 */ 1 5 9 2'

NB. =========================================================
Lab Chapter Color and Font Cues
NB. =========================================================
Lab Section Color cues
If a verb raises an error, it will be capped by the error name in white on a bright red background, and its result block may be incomplete.

The top line of a noun block is the name of the noun, if it has one, followed by a line showing the shape of the noun on a blue background.

A verb block has a line giving name of the verb in large type on a burgundy background, flanked by its ranks on a white background.
Under that is a noun block holding the verb's result and its shape. The shape of the result is in two parts, either of which may be empty: the frame in black on a white background and the shape of a result-cell in white on a blue background.

)

NB. =========================================================
Lab Section Colors in the shape
Dissect uses color to give you information about the various elements.

A noun block always shows the noun's shape in white type on a darker background. The uppermost blocks in the display illustrate this.  If the noun has a name, its name appears above the shape, as with the noun named l.

A verb block shows the shape of its result in two parts, either of which may be empty. The frame into which result-cells are assembled is in black type on a lighter background and the shape of a result-cell is in white type on a purple background. The shape of the whole result is the concatenation of the frame shape and the result-cell shape.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
l =: 5
dissect '(>:@:i. l) +"1"2 i. 3 4 5'

NB. =========================================================
Lab Section Determinate values
Did you notice something missing?  Look again to find it.

The computation of (i. 3 4 5) is not shown - only the result.

Any result that does not depend on a name is called a determinate value.

When any part of your sentence depends on a name, such as l here, Dissect assumes that you are mostly interested in operations on the names, and displays only determinate values that connect to a non-determinate block.

To see the computation of a determinate block, select its result.  Here, select the result of the top-right block.
You now see the noun (3 4 5) and the verb (i.) that produced the array.
)

NB. =========================================================
Lab Section Rank stack
Verb blocks contain a line showing the verb and its ranks.  This line may be preceded by lines for other modifiers, such as ", that are attached to the verb.  The verb-line plus all its modifiers is called the rank stack.

The reason there is a stack of 3 ranks for the + verb in this example is that the results of 3 verbs are being shown in the same block: +"1"2, +"1, and +.  Selection will apply to those verbs in turn, including a final selection that selects a single cell of + for highlighting.

Te first verb executed in the final result box is +"1"2. 

(You can see the verbs that start in a block by reading the rank stack from the bottom up.  To see which verbs end in a block, hover over the verb at the bottom of the rank stack and read the tooltip.)

Note that some of the ranks in the rank stack are in large bold italics. 
If the rank in the rank stack actually affects the result (i. e. if the frame is nonempty), it is displayed as large-bold-italic.  Otherwise it is displayed regular, and is informational only.
)

NB. =========================================================
Lab Section Display options for the rank stack
The Preferences menu has two options that affect the display of the rank stack.

Preferences|Show full compound-names causes the rank stack to show the full compound verb rather than the modifier that produced it.  Select that option and see the difference in the display.

Preferences|Show @ @: etc causes lines to be added to the rank stack for the structural modifiers (@ @: & &: &. &.:) which are usually omitted because the wiring shows their presence.  Select that option and see the line added to the display.

These options may help you get oriented to the Dissect display, especially when you are new to it.
)

NB. =========================================================
Lab Section Highlighting inputs to a result-cell
When a verb is executed on multiple cells, and the result-cells are assembled into a final result, the entire result is displayed.  You may select a result-cell to highlight it and the inputs that produced it.

A selected result-cell is colored the same color as its inputs and the associated rank(s) in the rank stack, and the verb in the sentence display at the top of the window.

Click once on a result of the +"1"2 verb. The result-cell you select changes color to match the verb that produced it, +"1. The cells of the inputs that went into it are outlined in the same color.

Click again in the same place to select a smaller cell. The color of that cell matches the the verb that produced it, +, and the inputs that produced it.

Each time you click in the same place you move the display to a deeper selection level. In result of the +"1"2 verb, the selection level advances from table to line to atom.
)

NB. =========================================================
Lab Section Colors in the frame and result-cell shape
Click the << button at the upper left corner to put the display back into its initial configuration.

The shape of the noun result of a verb is the frame of the arguments concatenated with the shape of a result-cell. In the shape of the result, the result-cell shape is the last part of the shape, displayed with a purple background and white text; the rest of the shape is the frame of the result, displayed with black text on a background color that corresponds to the selection level of the verb that created the frame.

Note that the shape of the + result is for the +"1"2 verb. Its frame is 3 and the result-cell shape is 4 5.
)

NB. =========================================================
Lab Section Selection
Now select a result-cell by clicking on it. The shape is now for the +"1 verb. Its frame is 3 4 and the result-cell shape is 5.

Click again in the same place to select a sub-result-cell of the previously selected result-cell. The shape is now for the + (rank 0) verb. Its frame is 3 4 5 and the result-cell shape is empty (as shown by the sliver of a purple block).

The frame comes from three different verbs, as can be seen from its coloring.  Each part of the frame has the color of the verb that produced it:

The first verb, +"1"2, has white background, produces the entire result, and has frame 3.

The second verb, +"1, has green background, produces the selected 4x5 table, and has frame 3 4.

The third verb, +, has magenta background, produces the selected list, and has frame 3 4 5.

The selection line, below the shape, gives the indexes of the selections you made.  It shows two values, one for each time you clicked.  If you click again inside the magenta area you will see a third selection appear.
)

NB. =========================================================
Lab Section Nouns with unit leading axis
A noun with a leading 1 in its shape is a potential source of confusion. It is a list of one item, and the item can have any shape. Examples are a one-atom list and a one-row table.

In the J session they look the same as they would without the leading unit axis. Note that the nouns a, b and c look the same in the J session although their shapes are, respectively, empty, 1 and 1 1.

Dissect calls attention to such nouns by displaying their values in bold italic font.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
a=:42 [b=:,:42 [c=:,:,:42
($a);($b);$c
a;b;c
dissect 'a;b;c'

NB. =========================================================
Lab Chapter Large Values
NB. =========================================================
Lab Section Large Values
Large Values

This is similar to the previous example, but the results are too large to fit on the screen.

To scroll the whole display within the window, click any empty point on the screen and drag it.

The Sizes menu allows changes to how much of a result is shown.

You can use the scroll bars to see all parts of a result.

You can also right click anywhere in the result to bring up a window devoted entirely to the display of its value. You may scroll around this window and make selections, consequences of which will be shown on the main view.

Right-clicking the data in the expanded window will close it.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '(i.3) +"1"2 i.12 40 3'

NB. =========================================================
Lab Section High Dimensions
A noun with more than two dimensions will display items of 3rd through nth dimension separated by increasingly thick blue lines.

Here, the 2x2 tables are arranged into 2x2x2x2 hyperbricks.  With each hyperbrick, the original 2x2 tables are separated by thin blue lines. The 2x2x2x2 hyperbricks are then arranged into a 2x2x2x2x2x2 array, with the component 2x2x2x2 hyperbricks separated by thicker blue lines.  An array of such 2x2x2x2x2x2 hyperbricks would be separated by even thicker blue lines, etc.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect 'i. 2 2 2 2 2 2'

NB. =========================================================
Lab Chapter Undisplayed Elements
NB. =========================================================
Lab Section Reflex ~
Some adverbs, and the hook, and the fork are not explicitly shown. Their action shows up in the 'wiring' of the diagram.

The ~ is not in the diagram, but it has caused a reversal of the inputs to the % verb.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '10 %~ 5'

NB. =========================================================
Lab Section Atop @
The @ appears nowhere in the diagram, but its effect is shown in that 3 4 is appended (,) to 1 2, and that result is input to the monadic box (<).
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '1 2 <@, 3 4'

NB. =========================================================
Lab Section Atop (@) vs At (@:) - Rank
The verb u@v has the rank of v; the verb u@:v has infinite rank (i.e., its argument is one big cell). The rank of *: (square) is 0, so each atom of <@*: is boxed. The whole result of <@:*: is in one box.

The difference between Atop (@) and At (@:) can be a source of confusion.

The verb u@v executes as many times as necessary, on v-rank cells of its argument(s). The verb u@:v executes once, on the whole argument(s). The arguments may be further subdivided by the ranks of u and v, when they are executed. (In u@v, v will not need to subdivide its argument(s), since the rank of u@v is the rank of v.)

In u@:v, v is executed against all its cells, and then those are assembled into a result, and that is passed to u.  You see this in the display: v's full assembled result is displayed.

In u@v, each result-cell of v is passed to u. The individual results of v are never assembled into a single array (indeed, they may be incompatible), so they are not displayed under v. The best you can do is pick one of them and see it. It has a different color because it's at a different selection level.

Summary:
u@v  - u operates separately on v-rank cells of the result of v

u@:v - u operates once on the whole result of v

The difference between Compose (&) and Appose (&:) is similar.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '(<@*: i.3);<@:*: i.3'

NB. =========================================================
Lab Chapter Fork
NB. =========================================================
Lab Section Diagram of a fork
A fork is shown in the sequence of operation; The results of +/ and # are input for the % verb.

Select the result of +/ to raise an expansion block that displays the intermediate additions that contributed to it. The intermediate results of / are not shown unless you ask for them by selecting the end result.

Select the intermediate result 145 and see the arguments to + that produced it highlighted. They are the previous intrmediate result 121 and the input atom 24. 
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '(+/%#) 20 22 24 35 40 46'

NB. =========================================================
Lab Section Rank applied to a fork
Here are two different forks; the difference is that rank is specified for one of them.

A fork has infinite rank so +/%# on a 3 4 5 brick computes a 4x5 table which is the average of the three tables which are items of of the brick.  This is shown on the left-hand side of the display.

Specifying that the fork operates on rows ("1) causes it to compute a 3x4 table of row averages.  This is shown on the right-hand side of the display.  Click on a result row in the right-hand % verb to see how the row was calculated.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '((+/%#)a);((+/%#)"1 a)'[a=:i. 3 4 5

NB. =========================================================
Lab Section Rank Details
For (f g h) y, the fork will execute once. The f and h verbs operate as usual, subdividing y if necessary. The results of f and h are passed to g. The result of g is the result of the fork.

For (f g h)"n y, the execution of f, h, and g is done on each n-cell of the input.

That is, the fork is executed as described above on each n-cell of y. The results of the repeated executions of (f g h) are assembled into the result of (f g h)"n.

Dissect shows the fork rank where it is applied, at the tines of the fork, +/ and # in the currently displayed sentence.
)

NB. =========================================================
Lab Section The fork that wasn't - a perennial puzzler
Here's a kind of result that puzzles many newcomers to J:

The dictionary says '(f g h)y evaluates as (f y) g (h y)' and our newcomer wants to calculate an average with sum(+/) divided by(%) number(#), so he writes the sentence in the example, forgetting the parentheses.

If +/%# were interpreted as a fork, the result would be the average of the list of numbers, but instead, the right-to-left evaluation first executes # on the list, then % on that result, then +/ on that result.

The diagram makes it easy to see what went wrong.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '+/%# 24 22 31 40 46'

NB. =========================================================
Lab Chapter Under (&.: and &.)
NB. =========================================================
Lab Section Standard Deviation using &.:
Calculations done under a transformation are easy to express in J. Standard deviation is the average of the differences from the mean under the transformation of squaring.
The Dissect diagram shows both operations, squaring(*:) and square root(*:^:_1). *:^:_1 denotes the inverse of *: .

The square root, though not mentioned in the J sentence, is implied by the definition of Under(&.:)

1) Transform argument

2) Perform operation on transformed values

3) Inverse transformation on the result of 2)
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
]values =: 10?100
]mean =: (+/%#) values
NB. Population standard deviation
dissect '(+/ % #)&.:*: mean - values'

NB. =========================================================
Lab Section Round to nearest 10th using &.
Here we execute (floor atop adding 0.5) under the transformation 'times 10' to get a result with one place after the decimal point instead of an integer.

The Under conjunction (&.) is not in the diagram, but is shown in the sequence of operations:

1) Multiply by 10

2) Apply the verb <.@(0.5&+)

3) Divide by 10

Applying the verb after the transformation 10&* in step 1 and reversing the transformation with 10&*^_1 in step 3 are the effect of the &.(10&*) adverb. (A conjunction and a verb form an adverb.)
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '<.@(0.5&+)&.(10&*) 1.23 2.35 3.54 4.66 5.22'

NB. =========================================================
Lab Section each (&.>)
The predefined adverb 'each' opens a box, performs its verb, then reboxes the result.
In effect, it makes its verb operate inside the box.
The Dissect diagram shows only the effect, the verb operating inside the box.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '{:&.> ''Nixon'';''Carter'';''Reagan'''

NB. =========================================================
Lab Chapter Framing Fills and Fill Cells
NB. =========================================================
Lab Section Framing Fill Example 1 - Open
When a verb acts on multiple cells, the result-cells must be assembled into a single array.

When result-cells of different shapes are assembled, the short ones must be padded out to match the size of the larger.  The added padding is called framing fill.

Framing fill is blank, zero, or an empty box (a:), appropriately for type. Dissect marks framing fill by single crosshatching over the fill value.

When a result requires fill, the shape after fill is shown in parentheses.  The parentheses are a signifier of fill.

Here, opening (>) a 5x2 table of boxes creates a 5x2 table of lists, the longest of which is 15 characters, so the shorter ones are padded to that length.

The diagram shows that the fills were added in the open (>) verb; as far as the ravel (,) verb knows, the spaces were always there.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
]names =: ('W';'') ,~ _2 ]\ ;: 'George Washington John Adams Thomas Jefferson Joe Rumpelstiltskin'
dissect ',"2 > names'

NB. =========================================================
Lab Section Selection when there is fill
Click on the name Washington in the result of the > verb and notice the shape line.

It now shows 10(15) in the result-shape.  This indicates that you selected a cell whose result had shape 10, but was extended to shape 15 by fill.  The parentheses around the filled shape still indicate that the overall result was filled.

Click on the name W in the result of the > verb.

This cell produced an atom.  The word 'atom' is used in the shape to distinguish this display from the unselected case.  The parentheses around the filled shape still indicate that the overall result was filled.
)

NB. =========================================================
Lab Section Empty Arrays
Looking at the top block (which displays the noun 'names'), notice the bottom-right box.

The solid dark rectangle represents an empty list.  It is given a visible representation so that you can click on it.

Any array that contains a 0 in its shape is empty.  An empty array is displayed as an array of dark rectangles whose shape is the shape of the array up to the point where the 0 was encountered.

So, an empty list (shape=0) is displayed as rectangles with empty shape, i. e. a single-atom rectangle.

An empty array of shape 3 0 2 is display as a list of 3 rectangles.  These rectangles may be selected individually.
)

NB. =========================================================
Lab Section Example 2 - Raze
Raze (;) opens the boxed strings and concatenates them. This is done one line at a time, as specified by ("1).

Fill characters are added to make all the lines the same length.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect ';"1 names'

NB. =========================================================
Lab Section Example 3 - Clever use of primitive :;
The obverse (^:_1) of the 'words' verb (;:) opens the boxed words and puts them into a character string, separated by spaces. This is done one line at a time, as specified by ("1).

This gives the same result as the last example (;"1 names) except the 'words' (;:) obverse verb separates words with a space.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect ';:^:_1"1 names'

NB. =========================================================
Lab Section Other fill 1 - Verb fill
Framing fill, which is added during assembly of multiple result-cells, should not be confused with verb fill, which is added by some verbs as part of their normal operation.

(x , y) for example will add fill if the items of x and y have different shapes, but this is all part of the operation of the (,) verb which has infinite rank and produces a single result-cell.

Verbs that insert verb fill usually allow you to specify the atom to be used for the fill.  Dissect does not mark verb fill in any way.

In the display, the values of 999 are verb fill.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '3 4 ,:!.(999) 1 2 3 4 5'

NB. =========================================================
Lab Section Other fill 2 - Fill cells
The word 'fill' has another meaning, when used in the phrase 'fill cell'.

If a verb has a 0 in the frame, there are no cells for it to operate on.  In this case, a single cell is created, containing only fills, and the verb is executed on the fill-cell.  The shape and type of the result are used to give the result of the verb.  (this result will always be empty, because the frame of the verb contains 0, so the actual result-values from the execution on the fill-cell are immaterial).

In the example, execution on the fill-cell produced the string

value: 0 0 0 0

which has shape 14, so the shape of the overall verb-result is
3 0 14.

You can use the Preferences menu to have Dissect mark the places where fill-cells are created and operated on.  Turn on that switch, and see that Dissect puts * in the shape line and rank stack.  The tooltips for these blocks explain that they show that a fill-cell was used.
)
PREPARE
dissectclose''
dissect =: dissectonce
PREPARE
dissect '(''value: '' , ":)"1 i. 3 0 4'

